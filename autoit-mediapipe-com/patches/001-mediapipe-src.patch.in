diff --git a/.gitignore b/.gitignore
index 525f0878..1b9d4aff 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,3 +5,4 @@ mediapipe/provisioning_profile.mobileprovision
 node_modules/
 .configure.bazelrc
 .user.bazelrc
+/mediapipe/autoit
diff --git a/WORKSPACE b/WORKSPACE
index 76089818..1159f01a 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -352,7 +352,7 @@ new_local_repository(
 new_local_repository(
     name = "windows_opencv",
     build_file = "@//third_party:opencv_windows.BUILD",
-    path = "C:\\opencv\\build",
+    path = "@OpenCV_DIR_ESC@",
 )
 
 http_archive(
diff --git a/mediapipe/framework/port/opencv_video_inc.h b/mediapipe/framework/port/opencv_video_inc.h
index dc84bf59..4678f3c7 100644
--- a/mediapipe/framework/port/opencv_video_inc.h
+++ b/mediapipe/framework/port/opencv_video_inc.h
@@ -85,13 +85,7 @@ inline int fourcc(char c1, char c2, char c3, char c4) {
 #include <opencv2/videoio.hpp>
 
 #if CV_VERSION_MAJOR == 4 && !defined(MEDIAPIPE_MOBILE)
-#include <opencv2/optflow.hpp>
-
-namespace cv {
-inline Ptr<DenseOpticalFlow> createOptFlow_DualTVL1() {
-  return optflow::createOptFlow_DualTVL1();
-}
-}  // namespace cv
+#include <opencv2/video/tracking.hpp>
 #endif
 
 namespace mediapipe {
diff --git a/mediapipe/tasks/BUILD b/mediapipe/tasks/BUILD
index 98ddd577..fdd6200e 100644
--- a/mediapipe/tasks/BUILD
+++ b/mediapipe/tasks/BUILD
@@ -17,6 +17,7 @@ package(default_visibility = ["//visibility:public"])
 package_group(
     name = "internal",
     packages = [
+        "//mediapipe/autoit/...",
         "//mediapipe/python/...",
         "//mediapipe/tasks/...",
     ],
diff --git a/mediapipe/tasks/cc/core/external_file_handler.cc b/mediapipe/tasks/cc/core/external_file_handler.cc
index a56f03d5..44b25c95 100644
--- a/mediapipe/tasks/cc/core/external_file_handler.cc
+++ b/mediapipe/tasks/cc/core/external_file_handler.cc
@@ -31,6 +31,7 @@ limitations under the License.
 #include <unistd.h>
 #endif  // _WIN32
 
+#include <filesystem>
 #include <memory>
 #include <string>
 
@@ -48,6 +49,8 @@ limitations under the License.
 #include "tools/cpp/runfiles/runfiles.h"
 #endif  // _WIN32
 
+namespace fs = std::filesystem;
+
 namespace mediapipe {
 namespace tasks {
 namespace core {
@@ -97,15 +100,18 @@ ExternalFileHandler::CreateFromExternalFile(
 }
 
 absl::StatusOr<std::string> PathToResourceAsFile(std::string path) {
+  if (fs::path(path).is_absolute()) {
+    return path;
+  }
+
+  if (fs::exists(path)) {
+    return fs::absolute(path).string();
+  }
+
 #ifndef _WIN32
   return path;
 #else
-  std::string qualified_path = path;
-  if (absl::StartsWith(qualified_path, "./")) {
-    qualified_path = "mediapipe" + qualified_path.substr(1);
-  } else if (path[0] != '/') {
-    qualified_path = "mediapipe/" + qualified_path;
-  }
+  std::string qualified_path = (fs::path("mediapipe") / path).string();
 
   std::string error;
   // TODO: We should ideally use `CreateForTests` when this is
diff --git a/mediapipe/tasks/python/test/test_utils.py b/mediapipe/tasks/python/test/test_utils.py
index 23ee4abe..eaaaa9ff 100644
--- a/mediapipe/tasks/python/test/test_utils.py
+++ b/mediapipe/tasks/python/test/test_utils.py
@@ -35,20 +35,28 @@ _RGB_CHANNELS = 3
 def test_srcdir():
   """Returns the path where to look for test data files."""
   if "test_srcdir" in flags.FLAGS:
-    return flags.FLAGS["test_srcdir"].value
+    return flags.FLAGS["test_srcdir"].value.split(";")
   elif "TEST_SRCDIR" in os.environ:
-    return os.environ["TEST_SRCDIR"]
+    return os.environ["TEST_SRCDIR"].split(";")
   else:
     raise RuntimeError("Missing TEST_SRCDIR environment.")
 
 
 def get_test_data_path(file_or_dirname_path: str) -> str:
   """Returns full test data path."""
-  for (directory, subdirs, files) in os.walk(test_srcdir()):
-    for f in subdirs + files:
-      path = os.path.join(directory, f)
-      if path.endswith(file_or_dirname_path):
-        return path
+  if os.path.exists(file_or_dirname_path):
+    return os.path.abspath(file_or_dirname_path)
+
+  for dirname in test_srcdir():
+    for (directory, subdirs, files) in os.walk(dirname):
+      for f in subdirs + files:
+        path = os.path.join(directory, f)
+
+        if os.path.exists(os.path.join(path, file_or_dirname_path)):
+          return os.path.abspath(os.path.join(path, file_or_dirname_path))
+
+        if path.endswith(os.path.normpath(file_or_dirname_path)):
+          return path
   raise ValueError("No %s in test directory: %s." %
                    (file_or_dirname_path, test_srcdir()))
 
diff --git a/mediapipe/tasks/testdata/text/BUILD b/mediapipe/tasks/testdata/text/BUILD
index 9813b654..289f2291 100644
--- a/mediapipe/tasks/testdata/text/BUILD
+++ b/mediapipe/tasks/testdata/text/BUILD
@@ -19,6 +19,7 @@ load(
 
 package(
     default_visibility = [
+        "//mediapipe/autoit:__subpackages__",
         "//mediapipe/calculators/tensor:__subpackages__",
         "//mediapipe/tasks:__subpackages__",
     ],
diff --git a/mediapipe/util/resource_util_default.cc b/mediapipe/util/resource_util_default.cc
index 3ebbd1f3..0d7748ff 100644
--- a/mediapipe/util/resource_util_default.cc
+++ b/mediapipe/util/resource_util_default.cc
@@ -13,12 +13,15 @@
 // limitations under the License.
 
 #include <fstream>
+#include <filesystem>
 
 #include "absl/flags/flag.h"
 #include "mediapipe/framework/deps/file_path.h"
 #include "mediapipe/framework/port/file_helpers.h"
 #include "mediapipe/framework/port/statusor.h"
 
+namespace fs = std::filesystem;
+
 ABSL_FLAG(
     std::string, resource_root_dir, "",
     "The absolute path to the resource directory."
@@ -39,10 +42,14 @@ absl::Status DefaultGetResourceContents(const std::string& path,
 }  // namespace internal
 
 absl::StatusOr<std::string> PathToResourceAsFile(const std::string& path) {
-  if (absl::StartsWith(path, "/")) {
+  if (fs::path(path).is_absolute()) {
     return path;
   }
 
+  if (fs::exists(path)) {
+    return fs::absolute(path).string();
+  }
+
   // Try to load the file from bazel-bin. If it does not exist, fall back to the
   // resource folder.
   auto bazel_path = JoinPath("bazel-bin", path);
diff --git a/third_party/opencv_windows.BUILD b/third_party/opencv_windows.BUILD
index ecf788ee..ccf94a85 100644
--- a/third_party/opencv_windows.BUILD
+++ b/third_party/opencv_windows.BUILD
@@ -5,7 +5,7 @@ licenses(["notice"])  # BSD license
 
 exports_files(["LICENSE"])
 
-OPENCV_VERSION = "3410"  # 3.4.10
+OPENCV_VERSION = "@OpenCV_DLLVERSION@"  # @OpenCV_VERSION@
 
 config_setting(
     name = "opt_build",
@@ -17,23 +17,23 @@ config_setting(
     values = {"compilation_mode": "dbg"},
 )
 
-# The following build rule assumes that the executable "opencv-3.4.10-vc14_vc15.exe"
+# The following build rule assumes that the file "@OpenCV_DOWNLOAD_NAME@"
 # is downloaded and the files are extracted to local.
 # If you install OpenCV separately, please modify the build rule accordingly.
 cc_library(
     name = "opencv",
     srcs = select({
         ":opt_build": [
-            "x64/vc15/lib/opencv_world" + OPENCV_VERSION + ".lib",
-            "x64/vc15/bin/opencv_world" + OPENCV_VERSION + ".dll",
+            "@OpenCV_VC_PATH@/lib/opencv_world" + OPENCV_VERSION + ".lib",
+            "@OpenCV_VC_PATH@/bin/opencv_world" + OPENCV_VERSION + ".dll",
         ],
         ":dbg_build": [
-            "x64/vc15/lib/opencv_world" + OPENCV_VERSION + "d.lib",
-            "x64/vc15/bin/opencv_world" + OPENCV_VERSION + "d.dll",
+            "@OpenCV_VC_PATH@/lib/opencv_world" + OPENCV_VERSION + "d.lib",
+            "@OpenCV_VC_PATH@/bin/opencv_world" + OPENCV_VERSION + "d.dll",
         ],
     }),
     hdrs = glob(["include/opencv2/**/*.h*"]),
     includes = ["include/"],
-    linkstatic = 1,
+    # linkstatic = 1,
     visibility = ["//visibility:public"],
 )
