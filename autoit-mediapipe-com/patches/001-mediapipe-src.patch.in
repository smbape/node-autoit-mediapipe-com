diff --git a/WORKSPACE b/WORKSPACE
index bf5e4236..5d5f58ec 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -283,7 +283,7 @@ new_local_repository(
 new_local_repository(
     name = "windows_opencv",
     build_file = "@//third_party:opencv_windows.BUILD",
-    path = "C:\\opencv\\build",
+    path = "@OpenCV_DIR_ESC@",
 )
 
 http_archive(
diff --git a/mediapipe/framework/port/opencv_video_inc.h b/mediapipe/framework/port/opencv_video_inc.h
index dc84bf59..4678f3c7 100644
--- a/mediapipe/framework/port/opencv_video_inc.h
+++ b/mediapipe/framework/port/opencv_video_inc.h
@@ -85,13 +85,7 @@ inline int fourcc(char c1, char c2, char c3, char c4) {
 #include <opencv2/videoio.hpp>
 
 #if CV_VERSION_MAJOR == 4 && !defined(MEDIAPIPE_MOBILE)
-#include <opencv2/optflow.hpp>
-
-namespace cv {
-inline Ptr<DenseOpticalFlow> createOptFlow_DualTVL1() {
-  return optflow::createOptFlow_DualTVL1();
-}
-}  // namespace cv
+#include <opencv2/video/tracking.hpp>
 #endif
 
 namespace mediapipe {
diff --git a/mediapipe/tasks/BUILD b/mediapipe/tasks/BUILD
index 98ddd577..fdd6200e 100644
--- a/mediapipe/tasks/BUILD
+++ b/mediapipe/tasks/BUILD
@@ -17,6 +17,7 @@ package(default_visibility = ["//visibility:public"])
 package_group(
     name = "internal",
     packages = [
+        "//mediapipe/autoit/...",
         "//mediapipe/python/...",
         "//mediapipe/tasks/...",
     ],
diff --git a/mediapipe/tasks/python/test/test_utils.py b/mediapipe/tasks/python/test/test_utils.py
index 23ee4abe..cace1fd0 100644
--- a/mediapipe/tasks/python/test/test_utils.py
+++ b/mediapipe/tasks/python/test/test_utils.py
@@ -44,10 +44,17 @@ def test_srcdir():
 
 def get_test_data_path(file_or_dirname_path: str) -> str:
   """Returns full test data path."""
+  if os.path.exists(file_or_dirname_path):
+    return os.path.abspath(file_or_dirname_path)
+
   for (directory, subdirs, files) in os.walk(test_srcdir()):
     for f in subdirs + files:
       path = os.path.join(directory, f)
-      if path.endswith(file_or_dirname_path):
+
+      if os.path.exists(os.path.join(path, file_or_dirname_path)):
+        return os.path.abspath(os.path.join(path, file_or_dirname_path))
+
+      if path.endswith(os.path.normpath(file_or_dirname_path)):
         return path
   raise ValueError("No %s in test directory: %s." %
                    (file_or_dirname_path, test_srcdir()))
diff --git a/third_party/opencv_windows.BUILD b/third_party/opencv_windows.BUILD
index ecf788ee..ccf94a85 100644
--- a/third_party/opencv_windows.BUILD
+++ b/third_party/opencv_windows.BUILD
@@ -5,7 +5,7 @@ licenses(["notice"])  # BSD license
 
 exports_files(["LICENSE"])
 
-OPENCV_VERSION = "3410"  # 3.4.10
+OPENCV_VERSION = "@OpenCV_DLLVERSION@"  # @OpenCV_VERSION@
 
 config_setting(
     name = "opt_build",
@@ -17,23 +17,23 @@ config_setting(
     values = {"compilation_mode": "dbg"},
 )
 
-# The following build rule assumes that the executable "opencv-3.4.10-vc14_vc15.exe"
+# The following build rule assumes that the file "@OpenCV_DOWNLOAD_NAME@"
 # is downloaded and the files are extracted to local.
 # If you install OpenCV separately, please modify the build rule accordingly.
 cc_library(
     name = "opencv",
     srcs = select({
         ":opt_build": [
-            "x64/vc15/lib/opencv_world" + OPENCV_VERSION + ".lib",
-            "x64/vc15/bin/opencv_world" + OPENCV_VERSION + ".dll",
+            "@OpenCV_VC_PATH@/lib/opencv_world" + OPENCV_VERSION + ".lib",
+            "@OpenCV_VC_PATH@/bin/opencv_world" + OPENCV_VERSION + ".dll",
         ],
         ":dbg_build": [
-            "x64/vc15/lib/opencv_world" + OPENCV_VERSION + "d.lib",
-            "x64/vc15/bin/opencv_world" + OPENCV_VERSION + "d.dll",
+            "@OpenCV_VC_PATH@/lib/opencv_world" + OPENCV_VERSION + "d.lib",
+            "@OpenCV_VC_PATH@/bin/opencv_world" + OPENCV_VERSION + "d.dll",
         ],
     }),
     hdrs = glob(["include/opencv2/**/*.h*"]),
     includes = ["include/"],
-    linkstatic = 1,
+    # linkstatic = 1,
     visibility = ["//visibility:public"],
 )
