diff --git a/.bazelrc b/.bazelrc
index 9f9b9476..c75b2988 100644
--- a/.bazelrc
+++ b/.bazelrc
@@ -12,28 +12,28 @@ build --enable_platform_specific_config
 test --test_env="GTEST_INSTALL_FAILURE_SIGNAL_HANDLER=1"
 
 # Linux
-build:linux --cxxopt=-std=c++17
-build:linux --host_cxxopt=-std=c++17
+build:linux --cxxopt=-std=c++20
+build:linux --host_cxxopt=-std=c++20
 build:linux --copt=-w
 
 # windows
-build:windows --cxxopt=/std:c++17
-build:windows --host_cxxopt=/std:c++17
+build:windows --cxxopt=/std:c++20
+build:windows --host_cxxopt=/std:c++20
 build:windows --copt=/w
 # For using M_* math constants on Windows with MSVC.
 build:windows --copt=/D_USE_MATH_DEFINES
 build:windows --host_copt=/D_USE_MATH_DEFINES
 
 # macOS
-build:macos --cxxopt=-std=c++17
-build:macos --host_cxxopt=-std=c++17
+build:macos --cxxopt=-std=c++20
+build:macos --host_cxxopt=-std=c++20
 build:macos --copt=-w
 
 # Sets the default Apple platform to macOS.
 build --apple_platform_type=macos
 
 # Compile ObjC++ files with C++17
-build --per_file_copt=.*\.mm\$@-std=c++17
+build --per_file_copt=.*\.mm\$@-std=c++20
 
 # Allow debugging with XCODE
 build --apple_generate_dsym
diff --git a/.bazelversion b/.bazelversion
index f3b5af39..19b860c1 100644
--- a/.bazelversion
+++ b/.bazelversion
@@ -1 +1 @@
-6.1.1
+6.4.0
diff --git a/.gitignore b/.gitignore
index 525f0878..f1b38dab 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,3 +5,4 @@ mediapipe/provisioning_profile.mobileprovision
 node_modules/
 .configure.bazelrc
 .user.bazelrc
+@MEDIAPIPE_ADDON_PACKAGE@
diff --git a/WORKSPACE b/WORKSPACE
index fd13e9b3..41c2b38a 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -21,6 +21,11 @@ bazel_skylib_workspace()
 load("@bazel_skylib//lib:versions.bzl", "versions")
 versions.check(minimum_bazel_version = "3.7.2")
 
+# @MEDIAPIPE_ADDON_PACKAGE@ dependencies
+load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
+load("//@MEDIAPIPE_ADDON_PACKAGE@@MEDIAPIPE_ADDON_REPOSITORIES@", "@MEDIAPIPE_ADDON_RULES_DEPENDENCIES@")
+@MEDIAPIPE_ADDON_RULES_DEPENDENCIES@()
+
 # ABSL on 2023-10-18
 http_archive(
     name = "com_google_absl",
@@ -361,14 +366,16 @@ http_archive(
     sha256 = "8b7b16ceb363420e0fd499576daf73fa338adb0b1449f58bea7862766baa1ac7"
 )
 
-http_archive(
+maybe(
+    repo_rule = http_archive,
     name = "opencv",
     build_file_content = all_content,
     strip_prefix = "opencv-3.4.10",
     urls = ["https://github.com/opencv/opencv/archive/3.4.10.tar.gz"],
 )
 
-new_local_repository(
+maybe(
+    repo_rule = new_local_repository,
     name = "linux_opencv",
     build_file = "@//third_party:opencv_linux.BUILD",
     path = "/usr",
@@ -380,7 +387,8 @@ new_local_repository(
     path = "/usr"
 )
 
-new_local_repository(
+maybe(
+    repo_rule = new_local_repository,
     name = "macos_opencv",
     build_file = "@//third_party:opencv_macos.BUILD",
     # For local MacOS builds, the path should point to an opencv@3 installation.
@@ -395,13 +403,15 @@ new_local_repository(
     path = "/usr/local/opt/ffmpeg",
 )
 
-new_local_repository(
+maybe(
+    repo_rule = new_local_repository,
     name = "windows_opencv",
     build_file = "@//third_party:opencv_windows.BUILD",
     path = "C:\\opencv\\build",
 )
 
-http_archive(
+maybe(
+    repo_rule = http_archive,
     name = "android_opencv",
     build_file = "@//third_party:opencv_android.BUILD",
     strip_prefix = "OpenCV-android-sdk",
@@ -413,7 +423,8 @@ http_archive(
 # trigger duplicate symbol errors in the linking stage of building a mediapipe ios app.
 # To get a higher version of OpenCV for iOS, opencv2.framework needs to be built from source with
 # '-DBUILD_PROTOBUF=OFF -DBUILD_opencv_dnn=OFF'.
-http_archive(
+maybe(
+    repo_rule = http_archive,
     name = "ios_opencv",
     sha256 = "7dd536d06f59e6e1156b546bd581523d8df92ce83440002885ec5abc06558de2",
     build_file = "@//third_party:opencv_ios.BUILD",
diff --git a/mediapipe/framework/legacy_calculator_support.cc b/mediapipe/framework/legacy_calculator_support.cc
index 13fd714a..3bfb373e 100644
--- a/mediapipe/framework/legacy_calculator_support.cc
+++ b/mediapipe/framework/legacy_calculator_support.cc
@@ -17,9 +17,19 @@
 namespace mediapipe {
 
 template <>
+// ABSL_CONST_INIT triggers b/155992786 with some versions of Clang on Apple
+// platforms.
+#ifndef __APPLE__
+    ABSL_CONST_INIT
+#endif                                // !__APPLE__
 thread_local CalculatorContext*
     LegacyCalculatorSupport::Scoped<CalculatorContext>::current_ = nullptr;
 template <>
+// ABSL_CONST_INIT triggers b/155992786 with some versions of Clang on Apple
+// platforms.
+#ifndef __APPLE__
+    ABSL_CONST_INIT
+#endif                                // !__APPLE__
 thread_local CalculatorContract*
     LegacyCalculatorSupport::Scoped<CalculatorContract>::current_ = nullptr;
 
diff --git a/mediapipe/framework/packet.h b/mediapipe/framework/packet.h
index d5cc8700..8839be48 100644
--- a/mediapipe/framework/packet.h
+++ b/mediapipe/framework/packet.h
@@ -410,6 +410,10 @@ class HolderBase {
   template <typename T>
   const Holder<T>* As() const;
 
+  // Release the pointer to MessageLite type for the data in holder, if
+  // underlying object is protocol buffer type, otherwise returns an error.
+  virtual absl::StatusOr<std::unique_ptr<proto_ns::MessageLite>> ReleaseProtoMessageLite() = 0;
+
   // Returns the pointer to MessageLite type for the data in holder, if
   // underlying object is protocol buffer type, otherwise, nullptr is returned.
   virtual const proto_ns::MessageLite* GetProtoMessageLite() = 0;
@@ -553,6 +557,18 @@ class Holder : public HolderBase, private HolderPayloadRegistrator<T> {
   // Holder itself may be shared by several Packets.
   const T* ptr_;
 
+  // Release the pointer to MessageLite type for the data in holder, if
+  // underlying object is protocol buffer type, otherwise returns an error.
+  absl::StatusOr<std::unique_ptr<proto_ns::MessageLite>> ReleaseProtoMessageLite() override {
+    if constexpr (std::is_base_of_v<proto_ns::MessageLite, T>) {
+      return Release<proto_ns::MessageLite>();
+    } else {
+      return absl::InvalidArgumentError(absl::StrCat(
+        "The Holder stores \"", kTypeId<T>.name(), "\"",
+        "which is not convertible to proto_ns::MessageLite."));
+    }
+  }
+
   // Returns the MessageLite pointer to the data, if the underlying object type
   // is protocol buffer, otherwise, nullptr is returned.
   const proto_ns::MessageLite* GetProtoMessageLite() override {
diff --git a/mediapipe/framework/port/opencv_video_inc.h b/mediapipe/framework/port/opencv_video_inc.h
index 5f06d923..c78c214a 100644
--- a/mediapipe/framework/port/opencv_video_inc.h
+++ b/mediapipe/framework/port/opencv_video_inc.h
@@ -85,13 +85,7 @@ inline int fourcc(char c1, char c2, char c3, char c4) {
 #include <opencv2/videoio.hpp>
 
 #if CV_VERSION_MAJOR == 4 && !defined(MEDIAPIPE_MOBILE)
-#include <opencv2/optflow.hpp>
-
-namespace cv {
-inline Ptr<DenseOpticalFlow> createOptFlow_DualTVL1() {
-  return optflow::createOptFlow_DualTVL1();
-}
-}  // namespace cv
+#include <opencv2/video/tracking.hpp>
 #endif
 
 namespace mediapipe {
diff --git a/mediapipe/gpu/gpu_service.cc b/mediapipe/gpu/gpu_service.cc
index 53a0e0f4..a18604ab 100644
--- a/mediapipe/gpu/gpu_service.cc
+++ b/mediapipe/gpu/gpu_service.cc
@@ -16,7 +16,7 @@
 
 namespace mediapipe {
 
-const GraphService<GpuResources> kGpuService(
+ABSL_CONST_INIT const GraphService<GpuResources> kGpuService(
     "kGpuService", GraphServiceBase::kAllowDefaultInitialization);
 
 }  // namespace mediapipe
diff --git a/mediapipe/tasks/BUILD b/mediapipe/tasks/BUILD
index 582fc4c3..3099073a 100644
--- a/mediapipe/tasks/BUILD
+++ b/mediapipe/tasks/BUILD
@@ -17,6 +17,7 @@ package(default_visibility = ["//visibility:public"])
 package_group(
     name = "internal",
     packages = [
+        "//@MEDIAPIPE_ADDON_PACKAGE@/...",
         "//mediapipe/python/...",
         "//mediapipe/tasks/...",
     ],
diff --git a/mediapipe/tasks/cc/core/task_api_factory.h b/mediapipe/tasks/cc/core/task_api_factory.h
index a11a23fc..dbb5fe6c 100644
--- a/mediapipe/tasks/cc/core/task_api_factory.h
+++ b/mediapipe/tasks/cc/core/task_api_factory.h
@@ -76,15 +76,17 @@ class TaskApiFactory {
         found_task_subgraph = true;
       }
     }
+#if !MEDIAPIPE_DISABLE_GPU
     MP_ASSIGN_OR_RETURN(
         auto runner,
-#if !MEDIAPIPE_DISABLE_GPU
         core::TaskRunner::Create(std::move(graph_config), std::move(resolver),
                                  std::move(packets_callback),
                                  std::move(default_executor),
                                  std::move(input_side_packets),
                                  /*resources=*/nullptr, std::move(error_fn)));
 #else
+    MP_ASSIGN_OR_RETURN(
+        auto runner,
         core::TaskRunner::Create(
             std::move(graph_config), std::move(resolver),
             std::move(packets_callback), std::move(default_executor),
diff --git a/mediapipe/tasks/python/test/test_utils.py b/mediapipe/tasks/python/test/test_utils.py
index e790b915..be858061 100644
--- a/mediapipe/tasks/python/test/test_utils.py
+++ b/mediapipe/tasks/python/test/test_utils.py
@@ -34,20 +34,28 @@ _RGB_CHANNELS = 3
 def test_srcdir():
   """Returns the path where to look for test data files."""
   if "test_srcdir" in flags.FLAGS:
-    return flags.FLAGS["test_srcdir"].value
+    return flags.FLAGS["test_srcdir"].value.split(";")
   elif "TEST_SRCDIR" in os.environ:
-    return os.environ["TEST_SRCDIR"]
+    return os.environ["TEST_SRCDIR"].split(";")
   else:
     raise RuntimeError("Missing TEST_SRCDIR environment.")
 
 
 def get_test_data_path(file_or_dirname_path: str) -> str:
   """Returns full test data path."""
-  for directory, subdirs, files in os.walk(test_srcdir()):
-    for f in subdirs + files:
-      path = os.path.join(directory, f)
-      if path.endswith(file_or_dirname_path):
-        return path
+  if os.path.exists(file_or_dirname_path):
+    return os.path.abspath(file_or_dirname_path)
+
+  for dirname in test_srcdir():
+    for (directory, subdirs, files) in os.walk(dirname):
+      for f in subdirs + files:
+        path = os.path.join(directory, f)
+
+        if os.path.exists(os.path.join(path, file_or_dirname_path)):
+          return os.path.abspath(os.path.join(path, file_or_dirname_path))
+
+        if path.endswith(os.path.normpath(file_or_dirname_path)):
+          return path
   raise ValueError(
       "No %s in test directory: %s." % (file_or_dirname_path, test_srcdir())
   )
diff --git a/mediapipe/tasks/testdata/text/BUILD b/mediapipe/tasks/testdata/text/BUILD
index b05e748b..615db35c 100644
--- a/mediapipe/tasks/testdata/text/BUILD
+++ b/mediapipe/tasks/testdata/text/BUILD
@@ -19,6 +19,7 @@ load(
 
 package(
     default_visibility = [
+        "//@MEDIAPIPE_ADDON_PACKAGE@:__subpackages__",
         "//mediapipe/calculators/tensor:__subpackages__",
         "//mediapipe/model_maker:__subpackages__",
         "//mediapipe/tasks:__subpackages__",
diff --git a/mediapipe/util/resource_util_default.cc b/mediapipe/util/resource_util_default.cc
index 3ebbd1f3..0d7748ff 100644
--- a/mediapipe/util/resource_util_default.cc
+++ b/mediapipe/util/resource_util_default.cc
@@ -13,12 +13,15 @@
 // limitations under the License.
 
 #include <fstream>
+#include <filesystem>
 
 #include "absl/flags/flag.h"
 #include "mediapipe/framework/deps/file_path.h"
 #include "mediapipe/framework/port/file_helpers.h"
 #include "mediapipe/framework/port/statusor.h"
 
+namespace fs = std::filesystem;
+
 ABSL_FLAG(
     std::string, resource_root_dir, "",
     "The absolute path to the resource directory."
@@ -39,10 +42,14 @@ absl::Status DefaultGetResourceContents(const std::string& path,
 }  // namespace internal
 
 absl::StatusOr<std::string> PathToResourceAsFile(const std::string& path) {
-  if (absl::StartsWith(path, "/")) {
+  if (fs::path(path).is_absolute()) {
     return path;
   }
 
+  if (fs::exists(path)) {
+    return fs::absolute(path).string();
+  }
+
   // Try to load the file from bazel-bin. If it does not exist, fall back to the
   // resource folder.
   auto bazel_path = JoinPath("bazel-bin", path);
diff --git a/mediapipe/util/resource_util_windows.cc b/mediapipe/util/resource_util_windows.cc
index 6d620e58..77c65057 100644
--- a/mediapipe/util/resource_util_windows.cc
+++ b/mediapipe/util/resource_util_windows.cc
@@ -13,6 +13,7 @@
 // limitations under the License.
 
 #include <fstream>
+#include <filesystem>
 
 #include "absl/flags/flag.h"
 #include "mediapipe/framework/deps/file_path.h"
@@ -21,6 +22,8 @@
 #include "mediapipe/framework/port/statusor.h"
 #include "tools/cpp/runfiles/runfiles.h"
 
+namespace fs = std::filesystem;
+
 ABSL_FLAG(
     std::string, resource_root_dir, "",
     "The absolute path to the resource directory."
@@ -71,13 +74,16 @@ absl::Status DefaultGetResourceContents(const std::string& path,
 }  // namespace internal
 
 absl::StatusOr<std::string> PathToResourceAsFile(const std::string& path) {
-  std::string qualified_path = path;
-  if (absl::StartsWith(qualified_path, "./")) {
-    qualified_path = "mediapipe" + qualified_path.substr(1);
-  } else if (path[0] != '/') {
-    qualified_path = "mediapipe/" + qualified_path;
+  if (fs::path(path).is_absolute()) {
+    return path;
+  }
+
+  if (fs::exists(path)) {
+    return fs::absolute(path).string();
   }
 
+  std::string qualified_path = (fs::path("mediapipe") / path).string();
+
   // Try to load the file from bazel-bin. If it does not exist, fall back to the
   // resource folder.
   auto bazel_path = internal::PathToResourceAsFileInternal(qualified_path);
